/* tslint:disable */
/* eslint-disable */
/**
 * transcendence-app
 * The transcendence-app API description
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  Friend,
  UpdateUserDto,
  User,
  UserResponseDto,
  UserWithLevelDto,
} from '../models';
import {
    FriendFromJSON,
    FriendToJSON,
    UpdateUserDtoFromJSON,
    UpdateUserDtoToJSON,
    UserFromJSON,
    UserToJSON,
    UserResponseDtoFromJSON,
    UserResponseDtoToJSON,
    UserWithLevelDtoFromJSON,
    UserWithLevelDtoToJSON,
} from '../models';

export interface UserControllerBlockUserRequest {
    userId: string;
}

export interface UserControllerFollowUserRequest {
    userId: string;
}

export interface UserControllerGetFriendRequest {
    userId: string;
}

export interface UserControllerGetFriendsRequest {
    limit?: number;
    sort?: UserControllerGetFriendsSortEnum;
    search?: string;
    offset?: number;
}

export interface UserControllerGetUserByUserNameRequest {
    userName: string;
}

export interface UserControllerGetUsersRequest {
    limit?: number;
    sort?: UserControllerGetUsersSortEnum;
    search?: string;
    offset?: number;
}

export interface UserControllerUnblockUserRequest {
    userId: string;
}

export interface UserControllerUnfollowUserRequest {
    userId: string;
}

export interface UserControllerUpdateCurrentUserRequest {
    updateUserDto: UpdateUserDto;
}

export interface UserControllerUploadAvatarRequest {
    file?: Blob;
}

/**
 * 
 */
export class UsersApi extends runtime.BaseAPI {

    /**
     */
    async userControllerBlockUserRaw(requestParameters: UserControllerBlockUserRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.userId === null || requestParameters.userId === undefined) {
            throw new runtime.RequiredError('userId','Required parameter requestParameters.userId was null or undefined when calling userControllerBlockUser.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v1/user/block/{userId}`.replace(`{${"userId"}}`, encodeURIComponent(String(requestParameters.userId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async userControllerBlockUser(requestParameters: UserControllerBlockUserRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.userControllerBlockUserRaw(requestParameters, initOverrides);
    }

    /**
     */
    async userControllerFollowUserRaw(requestParameters: UserControllerFollowUserRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.userId === null || requestParameters.userId === undefined) {
            throw new runtime.RequiredError('userId','Required parameter requestParameters.userId was null or undefined when calling userControllerFollowUser.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v1/user/friend/{userId}`.replace(`{${"userId"}}`, encodeURIComponent(String(requestParameters.userId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async userControllerFollowUser(requestParameters: UserControllerFollowUserRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.userControllerFollowUserRaw(requestParameters, initOverrides);
    }

    /**
     */
    async userControllerGetBlocksRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<User>>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v1/user/block`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(UserFromJSON));
    }

    /**
     */
    async userControllerGetBlocks(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<User>> {
        const response = await this.userControllerGetBlocksRaw(initOverrides);
        return await response.value();
    }

    /**
     */
    async userControllerGetCurrentUserRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<UserWithLevelDto>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v1/user`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => UserWithLevelDtoFromJSON(jsonValue));
    }

    /**
     */
    async userControllerGetCurrentUser(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<UserWithLevelDto> {
        const response = await this.userControllerGetCurrentUserRaw(initOverrides);
        return await response.value();
    }

    /**
     */
    async userControllerGetFriendRaw(requestParameters: UserControllerGetFriendRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<Friend>>> {
        if (requestParameters.userId === null || requestParameters.userId === undefined) {
            throw new runtime.RequiredError('userId','Required parameter requestParameters.userId was null or undefined when calling userControllerGetFriend.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v1/user/friend/{userId}`.replace(`{${"userId"}}`, encodeURIComponent(String(requestParameters.userId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(FriendFromJSON));
    }

    /**
     */
    async userControllerGetFriend(requestParameters: UserControllerGetFriendRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<Friend>> {
        const response = await this.userControllerGetFriendRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async userControllerGetFriendsRaw(requestParameters: UserControllerGetFriendsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<UserWithLevelDto>>> {
        const queryParameters: any = {};

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.sort !== undefined) {
            queryParameters['sort'] = requestParameters.sort;
        }

        if (requestParameters.search !== undefined) {
            queryParameters['search'] = requestParameters.search;
        }

        if (requestParameters.offset !== undefined) {
            queryParameters['offset'] = requestParameters.offset;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v1/user/friends`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(UserWithLevelDtoFromJSON));
    }

    /**
     */
    async userControllerGetFriends(requestParameters: UserControllerGetFriendsRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<UserWithLevelDto>> {
        const response = await this.userControllerGetFriendsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async userControllerGetUserByUserNameRaw(requestParameters: UserControllerGetUserByUserNameRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<UserResponseDto>> {
        if (requestParameters.userName === null || requestParameters.userName === undefined) {
            throw new runtime.RequiredError('userName','Required parameter requestParameters.userName was null or undefined when calling userControllerGetUserByUserName.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v1/users/{userName}`.replace(`{${"userName"}}`, encodeURIComponent(String(requestParameters.userName))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => UserResponseDtoFromJSON(jsonValue));
    }

    /**
     */
    async userControllerGetUserByUserName(requestParameters: UserControllerGetUserByUserNameRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<UserResponseDto> {
        const response = await this.userControllerGetUserByUserNameRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async userControllerGetUsersRaw(requestParameters: UserControllerGetUsersRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<UserWithLevelDto>>> {
        const queryParameters: any = {};

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.sort !== undefined) {
            queryParameters['sort'] = requestParameters.sort;
        }

        if (requestParameters.search !== undefined) {
            queryParameters['search'] = requestParameters.search;
        }

        if (requestParameters.offset !== undefined) {
            queryParameters['offset'] = requestParameters.offset;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v1/users`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(UserWithLevelDtoFromJSON));
    }

    /**
     */
    async userControllerGetUsers(requestParameters: UserControllerGetUsersRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<UserWithLevelDto>> {
        const response = await this.userControllerGetUsersRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async userControllerUnblockUserRaw(requestParameters: UserControllerUnblockUserRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.userId === null || requestParameters.userId === undefined) {
            throw new runtime.RequiredError('userId','Required parameter requestParameters.userId was null or undefined when calling userControllerUnblockUser.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v1/user/block/{userId}`.replace(`{${"userId"}}`, encodeURIComponent(String(requestParameters.userId))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async userControllerUnblockUser(requestParameters: UserControllerUnblockUserRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.userControllerUnblockUserRaw(requestParameters, initOverrides);
    }

    /**
     */
    async userControllerUnfollowUserRaw(requestParameters: UserControllerUnfollowUserRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.userId === null || requestParameters.userId === undefined) {
            throw new runtime.RequiredError('userId','Required parameter requestParameters.userId was null or undefined when calling userControllerUnfollowUser.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v1/user/friend/{userId}`.replace(`{${"userId"}}`, encodeURIComponent(String(requestParameters.userId))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async userControllerUnfollowUser(requestParameters: UserControllerUnfollowUserRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.userControllerUnfollowUserRaw(requestParameters, initOverrides);
    }

    /**
     */
    async userControllerUpdateCurrentUserRaw(requestParameters: UserControllerUpdateCurrentUserRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<User>> {
        if (requestParameters.updateUserDto === null || requestParameters.updateUserDto === undefined) {
            throw new runtime.RequiredError('updateUserDto','Required parameter requestParameters.updateUserDto was null or undefined when calling userControllerUpdateCurrentUser.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/v1/user`,
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: UpdateUserDtoToJSON(requestParameters.updateUserDto),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => UserFromJSON(jsonValue));
    }

    /**
     */
    async userControllerUpdateCurrentUser(requestParameters: UserControllerUpdateCurrentUserRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<User> {
        const response = await this.userControllerUpdateCurrentUserRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async userControllerUploadAvatarRaw(requestParameters: UserControllerUploadAvatarRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<User>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const consumes: runtime.Consume[] = [
            { contentType: 'multipart/form-data' },
        ];
        // @ts-ignore: canConsumeForm may be unused
        const canConsumeForm = runtime.canConsumeForm(consumes);

        let formParams: { append(param: string, value: any): any };
        let useForm = false;
        // use FormData to transmit files using content-type "multipart/form-data"
        useForm = canConsumeForm;
        if (useForm) {
            formParams = new FormData();
        } else {
            formParams = new URLSearchParams();
        }

        if (requestParameters.file !== undefined) {
            formParams.append('file', requestParameters.file as any);
        }

        const response = await this.request({
            path: `/api/v1/user/avatar`,
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: formParams,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => UserFromJSON(jsonValue));
    }

    /**
     */
    async userControllerUploadAvatar(requestParameters: UserControllerUploadAvatarRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<User> {
        const response = await this.userControllerUploadAvatarRaw(requestParameters, initOverrides);
        return await response.value();
    }

}

/**
 * @export
 */
export const UserControllerGetFriendsSortEnum = {
    True: 'true',
    False: 'false'
} as const;
export type UserControllerGetFriendsSortEnum = typeof UserControllerGetFriendsSortEnum[keyof typeof UserControllerGetFriendsSortEnum];
/**
 * @export
 */
export const UserControllerGetUsersSortEnum = {
    True: 'true',
    False: 'false'
} as const;
export type UserControllerGetUsersSortEnum = typeof UserControllerGetUsersSortEnum[keyof typeof UserControllerGetUsersSortEnum];
