/* tslint:disable */
/* eslint-disable */
/**
 * transcendence-app
 * The transcendence-app API description
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  ChatMember,
  ChatRoom,
  CreateChatDto,
} from '../models';
import {
    ChatMemberFromJSON,
    ChatMemberToJSON,
    ChatRoomFromJSON,
    ChatRoomToJSON,
    CreateChatDtoFromJSON,
    CreateChatDtoToJSON,
} from '../models';

export interface ChatControllerCreateChatRoomRequest {
    createChatDto: CreateChatDto;
}

export interface ChatControllerCreateChatRoomMemberRequest {
    id: string;
}

export interface ChatControllerGetChatRoomsRequest {
    limit?: number;
    offset?: number;
    sort?: ChatControllerGetChatRoomsSortEnum;
    search?: string;
}

/**
 * 
 */
export class ChatApi extends runtime.BaseAPI {

    /**
     */
    async chatControllerCreateChatRoomRaw(requestParameters: ChatControllerCreateChatRoomRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ChatRoom>> {
        if (requestParameters.createChatDto === null || requestParameters.createChatDto === undefined) {
            throw new runtime.RequiredError('createChatDto','Required parameter requestParameters.createChatDto was null or undefined when calling chatControllerCreateChatRoom.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/v1/chat/room`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CreateChatDtoToJSON(requestParameters.createChatDto),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ChatRoomFromJSON(jsonValue));
    }

    /**
     */
    async chatControllerCreateChatRoom(requestParameters: ChatControllerCreateChatRoomRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ChatRoom> {
        const response = await this.chatControllerCreateChatRoomRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async chatControllerCreateChatRoomMemberRaw(requestParameters: ChatControllerCreateChatRoomMemberRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ChatMember>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling chatControllerCreateChatRoomMember.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v1/chat/room/{Id}/members`.replace(`{${"Id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ChatMemberFromJSON(jsonValue));
    }

    /**
     */
    async chatControllerCreateChatRoomMember(requestParameters: ChatControllerCreateChatRoomMemberRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ChatMember> {
        const response = await this.chatControllerCreateChatRoomMemberRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async chatControllerGetChatRoomsRaw(requestParameters: ChatControllerGetChatRoomsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<ChatRoom>>> {
        const queryParameters: any = {};

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.offset !== undefined) {
            queryParameters['offset'] = requestParameters.offset;
        }

        if (requestParameters.sort !== undefined) {
            queryParameters['sort'] = requestParameters.sort;
        }

        if (requestParameters.search !== undefined) {
            queryParameters['search'] = requestParameters.search;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v1/chat/room`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(ChatRoomFromJSON));
    }

    /**
     */
    async chatControllerGetChatRooms(requestParameters: ChatControllerGetChatRoomsRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<ChatRoom>> {
        const response = await this.chatControllerGetChatRoomsRaw(requestParameters, initOverrides);
        return await response.value();
    }

}

/**
 * @export
 */
export const ChatControllerGetChatRoomsSortEnum = {
    True: 'true',
    False: 'false'
} as const;
export type ChatControllerGetChatRoomsSortEnum = typeof ChatControllerGetChatRoomsSortEnum[keyof typeof ChatControllerGetChatRoomsSortEnum];
