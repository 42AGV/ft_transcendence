/* tslint:disable */
/* eslint-disable */
/**
 * transcendence-app
 * The transcendence-app API description
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  ChatMessageWithUser,
  Chatroom,
  ChatroomMember,
  ChatroomMemberWithUser,
  ChatroomMessageWithUser,
  CreateChatroomDto,
  GenericChat,
  JoinChatroomDto,
  UpdateChatroomDto,
  UpdateChatroomMemberDto,
} from '../models';
import {
    ChatMessageWithUserFromJSON,
    ChatMessageWithUserToJSON,
    ChatroomFromJSON,
    ChatroomToJSON,
    ChatroomMemberFromJSON,
    ChatroomMemberToJSON,
    ChatroomMemberWithUserFromJSON,
    ChatroomMemberWithUserToJSON,
    ChatroomMessageWithUserFromJSON,
    ChatroomMessageWithUserToJSON,
    CreateChatroomDtoFromJSON,
    CreateChatroomDtoToJSON,
    GenericChatFromJSON,
    GenericChatToJSON,
    JoinChatroomDtoFromJSON,
    JoinChatroomDtoToJSON,
    UpdateChatroomDtoFromJSON,
    UpdateChatroomDtoToJSON,
    UpdateChatroomMemberDtoFromJSON,
    UpdateChatroomMemberDtoToJSON,
} from '../models';

export interface ChatControllerCreateChatroomRequest {
    createChatroomDto: CreateChatroomDto;
}

export interface ChatControllerCreateChatroomMemberRequest {
    chatroomId: string;
    joinChatroomDto: JoinChatroomDto;
}

export interface ChatControllerDeleteChatroomRequest {
    chatroomId: string;
}

export interface ChatControllerGetAuthChatroomsRequest {
    limit?: number;
    sort?: ChatControllerGetAuthChatroomsSortEnum;
    search?: string;
    offset?: number;
}

export interface ChatControllerGetChatMessagesRequest {
    userId: string;
    limit?: number;
    offset?: number;
}

export interface ChatControllerGetChatroomByIdRequest {
    id: string;
}

export interface ChatControllerGetChatroomMemberRequest {
    chatroomId: string;
    userId: string;
}

export interface ChatControllerGetChatroomMembersRequest {
    chatroomId: string;
    limit?: number;
    sort?: ChatControllerGetChatroomMembersSortEnum;
    search?: string;
    offset?: number;
}

export interface ChatControllerGetChatroomMessagesRequest {
    chatroomId: string;
    limit?: number;
    offset?: number;
}

export interface ChatControllerGetChatroomsRequest {
    limit?: number;
    sort?: ChatControllerGetChatroomsSortEnum;
    search?: string;
    offset?: number;
}

export interface ChatControllerLeaveChatroomRequest {
    chatroomId: string;
}

export interface ChatControllerRemoveChatroomMemberRequest {
    userId: string;
    chatroomId: string;
}

export interface ChatControllerUpdateChatroomRequest {
    chatroomId: string;
    updateChatroomDto: UpdateChatroomDto;
}

export interface ChatControllerUpdateChatroomMemberRequest {
    userId: string;
    chatroomId: string;
    updateChatroomMemberDto: UpdateChatroomMemberDto;
}

export interface ChatControllerUploadAvatarRequest {
    chatroomId: string;
    file?: Blob;
}

/**
 * 
 */
export class ChatApi extends runtime.BaseAPI {

    /**
     */
    async chatControllerCreateChatroomRaw(requestParameters: ChatControllerCreateChatroomRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Chatroom>> {
        if (requestParameters.createChatroomDto === null || requestParameters.createChatroomDto === undefined) {
            throw new runtime.RequiredError('createChatroomDto','Required parameter requestParameters.createChatroomDto was null or undefined when calling chatControllerCreateChatroom.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/v1/chat/room`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CreateChatroomDtoToJSON(requestParameters.createChatroomDto),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ChatroomFromJSON(jsonValue));
    }

    /**
     */
    async chatControllerCreateChatroom(requestParameters: ChatControllerCreateChatroomRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Chatroom> {
        const response = await this.chatControllerCreateChatroomRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async chatControllerCreateChatroomMemberRaw(requestParameters: ChatControllerCreateChatroomMemberRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ChatroomMember>> {
        if (requestParameters.chatroomId === null || requestParameters.chatroomId === undefined) {
            throw new runtime.RequiredError('chatroomId','Required parameter requestParameters.chatroomId was null or undefined when calling chatControllerCreateChatroomMember.');
        }

        if (requestParameters.joinChatroomDto === null || requestParameters.joinChatroomDto === undefined) {
            throw new runtime.RequiredError('joinChatroomDto','Required parameter requestParameters.joinChatroomDto was null or undefined when calling chatControllerCreateChatroomMember.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/v1/chat/room/{chatroomId}/members`.replace(`{${"chatroomId"}}`, encodeURIComponent(String(requestParameters.chatroomId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: JoinChatroomDtoToJSON(requestParameters.joinChatroomDto),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ChatroomMemberFromJSON(jsonValue));
    }

    /**
     */
    async chatControllerCreateChatroomMember(requestParameters: ChatControllerCreateChatroomMemberRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ChatroomMember> {
        const response = await this.chatControllerCreateChatroomMemberRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async chatControllerDeleteChatroomRaw(requestParameters: ChatControllerDeleteChatroomRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Chatroom>> {
        if (requestParameters.chatroomId === null || requestParameters.chatroomId === undefined) {
            throw new runtime.RequiredError('chatroomId','Required parameter requestParameters.chatroomId was null or undefined when calling chatControllerDeleteChatroom.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v1/chat/room/{chatroomId}`.replace(`{${"chatroomId"}}`, encodeURIComponent(String(requestParameters.chatroomId))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ChatroomFromJSON(jsonValue));
    }

    /**
     */
    async chatControllerDeleteChatroom(requestParameters: ChatControllerDeleteChatroomRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Chatroom> {
        const response = await this.chatControllerDeleteChatroomRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async chatControllerGetAuthChatroomsRaw(requestParameters: ChatControllerGetAuthChatroomsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<GenericChat>>> {
        const queryParameters: any = {};

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.sort !== undefined) {
            queryParameters['sort'] = requestParameters.sort;
        }

        if (requestParameters.search !== undefined) {
            queryParameters['search'] = requestParameters.search;
        }

        if (requestParameters.offset !== undefined) {
            queryParameters['offset'] = requestParameters.offset;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v1/chat/room/member`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(GenericChatFromJSON));
    }

    /**
     */
    async chatControllerGetAuthChatrooms(requestParameters: ChatControllerGetAuthChatroomsRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<GenericChat>> {
        const response = await this.chatControllerGetAuthChatroomsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async chatControllerGetChatMessagesRaw(requestParameters: ChatControllerGetChatMessagesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<ChatMessageWithUser>>> {
        if (requestParameters.userId === null || requestParameters.userId === undefined) {
            throw new runtime.RequiredError('userId','Required parameter requestParameters.userId was null or undefined when calling chatControllerGetChatMessages.');
        }

        const queryParameters: any = {};

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.offset !== undefined) {
            queryParameters['offset'] = requestParameters.offset;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v1/chat/{userId}/messages`.replace(`{${"userId"}}`, encodeURIComponent(String(requestParameters.userId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(ChatMessageWithUserFromJSON));
    }

    /**
     */
    async chatControllerGetChatMessages(requestParameters: ChatControllerGetChatMessagesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<ChatMessageWithUser>> {
        const response = await this.chatControllerGetChatMessagesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async chatControllerGetChatroomByIdRaw(requestParameters: ChatControllerGetChatroomByIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Chatroom>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling chatControllerGetChatroomById.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v1/chat/room/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ChatroomFromJSON(jsonValue));
    }

    /**
     */
    async chatControllerGetChatroomById(requestParameters: ChatControllerGetChatroomByIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Chatroom> {
        const response = await this.chatControllerGetChatroomByIdRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async chatControllerGetChatroomMemberRaw(requestParameters: ChatControllerGetChatroomMemberRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ChatroomMember>> {
        if (requestParameters.chatroomId === null || requestParameters.chatroomId === undefined) {
            throw new runtime.RequiredError('chatroomId','Required parameter requestParameters.chatroomId was null or undefined when calling chatControllerGetChatroomMember.');
        }

        if (requestParameters.userId === null || requestParameters.userId === undefined) {
            throw new runtime.RequiredError('userId','Required parameter requestParameters.userId was null or undefined when calling chatControllerGetChatroomMember.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v1/chat/room/{chatroomId}/members/{userId}`.replace(`{${"chatroomId"}}`, encodeURIComponent(String(requestParameters.chatroomId))).replace(`{${"userId"}}`, encodeURIComponent(String(requestParameters.userId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ChatroomMemberFromJSON(jsonValue));
    }

    /**
     */
    async chatControllerGetChatroomMember(requestParameters: ChatControllerGetChatroomMemberRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ChatroomMember> {
        const response = await this.chatControllerGetChatroomMemberRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async chatControllerGetChatroomMembersRaw(requestParameters: ChatControllerGetChatroomMembersRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<ChatroomMemberWithUser>>> {
        if (requestParameters.chatroomId === null || requestParameters.chatroomId === undefined) {
            throw new runtime.RequiredError('chatroomId','Required parameter requestParameters.chatroomId was null or undefined when calling chatControllerGetChatroomMembers.');
        }

        const queryParameters: any = {};

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.sort !== undefined) {
            queryParameters['sort'] = requestParameters.sort;
        }

        if (requestParameters.search !== undefined) {
            queryParameters['search'] = requestParameters.search;
        }

        if (requestParameters.offset !== undefined) {
            queryParameters['offset'] = requestParameters.offset;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v1/chat/room/{chatroomId}/members`.replace(`{${"chatroomId"}}`, encodeURIComponent(String(requestParameters.chatroomId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(ChatroomMemberWithUserFromJSON));
    }

    /**
     */
    async chatControllerGetChatroomMembers(requestParameters: ChatControllerGetChatroomMembersRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<ChatroomMemberWithUser>> {
        const response = await this.chatControllerGetChatroomMembersRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async chatControllerGetChatroomMessagesRaw(requestParameters: ChatControllerGetChatroomMessagesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<ChatroomMessageWithUser>>> {
        if (requestParameters.chatroomId === null || requestParameters.chatroomId === undefined) {
            throw new runtime.RequiredError('chatroomId','Required parameter requestParameters.chatroomId was null or undefined when calling chatControllerGetChatroomMessages.');
        }

        const queryParameters: any = {};

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.offset !== undefined) {
            queryParameters['offset'] = requestParameters.offset;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v1/chat/room/{chatroomId}/messages`.replace(`{${"chatroomId"}}`, encodeURIComponent(String(requestParameters.chatroomId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(ChatroomMessageWithUserFromJSON));
    }

    /**
     */
    async chatControllerGetChatroomMessages(requestParameters: ChatControllerGetChatroomMessagesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<ChatroomMessageWithUser>> {
        const response = await this.chatControllerGetChatroomMessagesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async chatControllerGetChatroomsRaw(requestParameters: ChatControllerGetChatroomsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<GenericChat>>> {
        const queryParameters: any = {};

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.sort !== undefined) {
            queryParameters['sort'] = requestParameters.sort;
        }

        if (requestParameters.search !== undefined) {
            queryParameters['search'] = requestParameters.search;
        }

        if (requestParameters.offset !== undefined) {
            queryParameters['offset'] = requestParameters.offset;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v1/chat/room`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(GenericChatFromJSON));
    }

    /**
     */
    async chatControllerGetChatrooms(requestParameters: ChatControllerGetChatroomsRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<GenericChat>> {
        const response = await this.chatControllerGetChatroomsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async chatControllerLeaveChatroomRaw(requestParameters: ChatControllerLeaveChatroomRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ChatroomMember>> {
        if (requestParameters.chatroomId === null || requestParameters.chatroomId === undefined) {
            throw new runtime.RequiredError('chatroomId','Required parameter requestParameters.chatroomId was null or undefined when calling chatControllerLeaveChatroom.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v1/chat/room/{chatroomId}/members`.replace(`{${"chatroomId"}}`, encodeURIComponent(String(requestParameters.chatroomId))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ChatroomMemberFromJSON(jsonValue));
    }

    /**
     */
    async chatControllerLeaveChatroom(requestParameters: ChatControllerLeaveChatroomRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ChatroomMember> {
        const response = await this.chatControllerLeaveChatroomRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async chatControllerRemoveChatroomMemberRaw(requestParameters: ChatControllerRemoveChatroomMemberRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ChatroomMember>> {
        if (requestParameters.userId === null || requestParameters.userId === undefined) {
            throw new runtime.RequiredError('userId','Required parameter requestParameters.userId was null or undefined when calling chatControllerRemoveChatroomMember.');
        }

        if (requestParameters.chatroomId === null || requestParameters.chatroomId === undefined) {
            throw new runtime.RequiredError('chatroomId','Required parameter requestParameters.chatroomId was null or undefined when calling chatControllerRemoveChatroomMember.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v1/chat/room/{chatroomId}/members/{userId}`.replace(`{${"userId"}}`, encodeURIComponent(String(requestParameters.userId))).replace(`{${"chatroomId"}}`, encodeURIComponent(String(requestParameters.chatroomId))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ChatroomMemberFromJSON(jsonValue));
    }

    /**
     */
    async chatControllerRemoveChatroomMember(requestParameters: ChatControllerRemoveChatroomMemberRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ChatroomMember> {
        const response = await this.chatControllerRemoveChatroomMemberRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async chatControllerUpdateChatroomRaw(requestParameters: ChatControllerUpdateChatroomRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Chatroom>> {
        if (requestParameters.chatroomId === null || requestParameters.chatroomId === undefined) {
            throw new runtime.RequiredError('chatroomId','Required parameter requestParameters.chatroomId was null or undefined when calling chatControllerUpdateChatroom.');
        }

        if (requestParameters.updateChatroomDto === null || requestParameters.updateChatroomDto === undefined) {
            throw new runtime.RequiredError('updateChatroomDto','Required parameter requestParameters.updateChatroomDto was null or undefined when calling chatControllerUpdateChatroom.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/v1/chat/room/{chatroomId}`.replace(`{${"chatroomId"}}`, encodeURIComponent(String(requestParameters.chatroomId))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: UpdateChatroomDtoToJSON(requestParameters.updateChatroomDto),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ChatroomFromJSON(jsonValue));
    }

    /**
     */
    async chatControllerUpdateChatroom(requestParameters: ChatControllerUpdateChatroomRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Chatroom> {
        const response = await this.chatControllerUpdateChatroomRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async chatControllerUpdateChatroomMemberRaw(requestParameters: ChatControllerUpdateChatroomMemberRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ChatroomMember>> {
        if (requestParameters.userId === null || requestParameters.userId === undefined) {
            throw new runtime.RequiredError('userId','Required parameter requestParameters.userId was null or undefined when calling chatControllerUpdateChatroomMember.');
        }

        if (requestParameters.chatroomId === null || requestParameters.chatroomId === undefined) {
            throw new runtime.RequiredError('chatroomId','Required parameter requestParameters.chatroomId was null or undefined when calling chatControllerUpdateChatroomMember.');
        }

        if (requestParameters.updateChatroomMemberDto === null || requestParameters.updateChatroomMemberDto === undefined) {
            throw new runtime.RequiredError('updateChatroomMemberDto','Required parameter requestParameters.updateChatroomMemberDto was null or undefined when calling chatControllerUpdateChatroomMember.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/v1/chat/room/{chatroomId}/members/{userId}`.replace(`{${"userId"}}`, encodeURIComponent(String(requestParameters.userId))).replace(`{${"chatroomId"}}`, encodeURIComponent(String(requestParameters.chatroomId))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: UpdateChatroomMemberDtoToJSON(requestParameters.updateChatroomMemberDto),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ChatroomMemberFromJSON(jsonValue));
    }

    /**
     */
    async chatControllerUpdateChatroomMember(requestParameters: ChatControllerUpdateChatroomMemberRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ChatroomMember> {
        const response = await this.chatControllerUpdateChatroomMemberRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async chatControllerUploadAvatarRaw(requestParameters: ChatControllerUploadAvatarRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Chatroom>> {
        if (requestParameters.chatroomId === null || requestParameters.chatroomId === undefined) {
            throw new runtime.RequiredError('chatroomId','Required parameter requestParameters.chatroomId was null or undefined when calling chatControllerUploadAvatar.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const consumes: runtime.Consume[] = [
            { contentType: 'multipart/form-data' },
        ];
        // @ts-ignore: canConsumeForm may be unused
        const canConsumeForm = runtime.canConsumeForm(consumes);

        let formParams: { append(param: string, value: any): any };
        let useForm = false;
        // use FormData to transmit files using content-type "multipart/form-data"
        useForm = canConsumeForm;
        if (useForm) {
            formParams = new FormData();
        } else {
            formParams = new URLSearchParams();
        }

        if (requestParameters.file !== undefined) {
            formParams.append('file', requestParameters.file as any);
        }

        const response = await this.request({
            path: `/api/v1/chat/room/{chatroomId}/avatar`.replace(`{${"chatroomId"}}`, encodeURIComponent(String(requestParameters.chatroomId))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: formParams,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ChatroomFromJSON(jsonValue));
    }

    /**
     */
    async chatControllerUploadAvatar(requestParameters: ChatControllerUploadAvatarRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Chatroom> {
        const response = await this.chatControllerUploadAvatarRaw(requestParameters, initOverrides);
        return await response.value();
    }

}

/**
 * @export
 */
export const ChatControllerGetAuthChatroomsSortEnum = {
    True: 'true',
    False: 'false'
} as const;
export type ChatControllerGetAuthChatroomsSortEnum = typeof ChatControllerGetAuthChatroomsSortEnum[keyof typeof ChatControllerGetAuthChatroomsSortEnum];
/**
 * @export
 */
export const ChatControllerGetChatroomMembersSortEnum = {
    True: 'true',
    False: 'false'
} as const;
export type ChatControllerGetChatroomMembersSortEnum = typeof ChatControllerGetChatroomMembersSortEnum[keyof typeof ChatControllerGetChatroomMembersSortEnum];
/**
 * @export
 */
export const ChatControllerGetChatroomsSortEnum = {
    True: 'true',
    False: 'false'
} as const;
export type ChatControllerGetChatroomsSortEnum = typeof ChatControllerGetChatroomsSortEnum[keyof typeof ChatControllerGetChatroomsSortEnum];
