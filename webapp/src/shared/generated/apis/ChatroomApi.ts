/* tslint:disable */
/* eslint-disable */
/**
 * transcendence-app
 * The transcendence-app API description
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  Chat,
  CreateChatDto,
} from '../models';
import {
    ChatFromJSON,
    ChatToJSON,
    CreateChatDtoFromJSON,
    CreateChatDtoToJSON,
} from '../models';

export interface ChatControllerCreateChatRequest {
    createChatDto: CreateChatDto;
}

export interface ChatControllerGetChatsRequest {
    limit?: number;
    offset?: number;
    sort?: ChatControllerGetChatsSortEnum;
    search?: string;
}

/**
 * 
 */
export class ChatroomApi extends runtime.BaseAPI {

    /**
     */
    async chatControllerCreateChatRaw(requestParameters: ChatControllerCreateChatRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Chat>> {
        if (requestParameters.createChatDto === null || requestParameters.createChatDto === undefined) {
            throw new runtime.RequiredError('createChatDto','Required parameter requestParameters.createChatDto was null or undefined when calling chatControllerCreateChat.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/v1/chatroom`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CreateChatDtoToJSON(requestParameters.createChatDto),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ChatFromJSON(jsonValue));
    }

    /**
     */
    async chatControllerCreateChat(requestParameters: ChatControllerCreateChatRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Chat> {
        const response = await this.chatControllerCreateChatRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async chatControllerGetChatsRaw(requestParameters: ChatControllerGetChatsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<Chat>>> {
        const queryParameters: any = {};

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.offset !== undefined) {
            queryParameters['offset'] = requestParameters.offset;
        }

        if (requestParameters.sort !== undefined) {
            queryParameters['sort'] = requestParameters.sort;
        }

        if (requestParameters.search !== undefined) {
            queryParameters['search'] = requestParameters.search;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v1/chatroom`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(ChatFromJSON));
    }

    /**
     */
    async chatControllerGetChats(requestParameters: ChatControllerGetChatsRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<Chat>> {
        const response = await this.chatControllerGetChatsRaw(requestParameters, initOverrides);
        return await response.value();
    }

}

/**
 * @export
 */
export const ChatControllerGetChatsSortEnum = {
    True: 'true',
    False: 'false'
} as const;
export type ChatControllerGetChatsSortEnum = typeof ChatControllerGetChatsSortEnum[keyof typeof ChatControllerGetChatsSortEnum];
