/* tslint:disable */
/* eslint-disable */
/**
 * transcendence-app
 * The transcendence-app API description
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  LoginUserDto,
  RegisterUserDto,
  TwoFactorAuthenticationCodeDto,
  User,
  UserWithAuthorizationResponseDto,
} from '../models';
import {
    LoginUserDtoFromJSON,
    LoginUserDtoToJSON,
    RegisterUserDtoFromJSON,
    RegisterUserDtoToJSON,
    TwoFactorAuthenticationCodeDtoFromJSON,
    TwoFactorAuthenticationCodeDtoToJSON,
    UserFromJSON,
    UserToJSON,
    UserWithAuthorizationResponseDtoFromJSON,
    UserWithAuthorizationResponseDtoToJSON,
} from '../models';

export interface AuthControllerEnableTwoFactorAuthenticationRequest {
    twoFactorAuthenticationCodeDto: TwoFactorAuthenticationCodeDto;
}

export interface AuthControllerLoginLocalUserRequest {
    loginUserDto: LoginUserDto;
}

export interface AuthControllerRegisterLocalUserRequest {
    registerUserDto: RegisterUserDto;
}

export interface AuthControllerRetrieveUserWithRolesRequest {
    username: string;
}

export interface AuthControllerValidateTwoFactorAuthenticationRequest {
    twoFactorAuthenticationCodeDto: TwoFactorAuthenticationCodeDto;
}

/**
 * 
 */
export class AuthApi extends runtime.BaseAPI {

    /**
     */
    async authControllerDisableTwoFactorAuthenticationRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v1/auth/2fa/disable`,
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async authControllerDisableTwoFactorAuthentication(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.authControllerDisableTwoFactorAuthenticationRaw(initOverrides);
    }

    /**
     */
    async authControllerEnableTwoFactorAuthenticationRaw(requestParameters: AuthControllerEnableTwoFactorAuthenticationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.twoFactorAuthenticationCodeDto === null || requestParameters.twoFactorAuthenticationCodeDto === undefined) {
            throw new runtime.RequiredError('twoFactorAuthenticationCodeDto','Required parameter requestParameters.twoFactorAuthenticationCodeDto was null or undefined when calling authControllerEnableTwoFactorAuthentication.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/v1/auth/2fa/enable`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: TwoFactorAuthenticationCodeDtoToJSON(requestParameters.twoFactorAuthenticationCodeDto),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async authControllerEnableTwoFactorAuthentication(requestParameters: AuthControllerEnableTwoFactorAuthenticationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.authControllerEnableTwoFactorAuthenticationRaw(requestParameters, initOverrides);
    }

    /**
     */
    async authControllerLoginLocalUserRaw(requestParameters: AuthControllerLoginLocalUserRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<User>> {
        if (requestParameters.loginUserDto === null || requestParameters.loginUserDto === undefined) {
            throw new runtime.RequiredError('loginUserDto','Required parameter requestParameters.loginUserDto was null or undefined when calling authControllerLoginLocalUser.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/v1/auth/local/login`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: LoginUserDtoToJSON(requestParameters.loginUserDto),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => UserFromJSON(jsonValue));
    }

    /**
     */
    async authControllerLoginLocalUser(requestParameters: AuthControllerLoginLocalUserRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<User> {
        const response = await this.authControllerLoginLocalUserRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async authControllerLogoutRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v1/auth/logout`,
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async authControllerLogout(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.authControllerLogoutRaw(initOverrides);
    }

    /**
     */
    async authControllerOauth42LoginRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v1/auth/login`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async authControllerOauth42Login(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.authControllerOauth42LoginRaw(initOverrides);
    }

    /**
     */
    async authControllerRegisterLocalUserRaw(requestParameters: AuthControllerRegisterLocalUserRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<User>> {
        if (requestParameters.registerUserDto === null || requestParameters.registerUserDto === undefined) {
            throw new runtime.RequiredError('registerUserDto','Required parameter requestParameters.registerUserDto was null or undefined when calling authControllerRegisterLocalUser.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/v1/auth/local/register`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: RegisterUserDtoToJSON(requestParameters.registerUserDto),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => UserFromJSON(jsonValue));
    }

    /**
     */
    async authControllerRegisterLocalUser(requestParameters: AuthControllerRegisterLocalUserRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<User> {
        const response = await this.authControllerRegisterLocalUserRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async authControllerRetrieveAuthUserWithRolesRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<UserWithAuthorizationResponseDto>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v1/auth/authorization`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => UserWithAuthorizationResponseDtoFromJSON(jsonValue));
    }

    /**
     */
    async authControllerRetrieveAuthUserWithRoles(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<UserWithAuthorizationResponseDto> {
        const response = await this.authControllerRetrieveAuthUserWithRolesRaw(initOverrides);
        return await response.value();
    }

    /**
     */
    async authControllerRetrieveUserWithRolesRaw(requestParameters: AuthControllerRetrieveUserWithRolesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<UserWithAuthorizationResponseDto>> {
        if (requestParameters.username === null || requestParameters.username === undefined) {
            throw new runtime.RequiredError('username','Required parameter requestParameters.username was null or undefined when calling authControllerRetrieveUserWithRoles.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v1/auth/authorization/{username}`.replace(`{${"username"}}`, encodeURIComponent(String(requestParameters.username))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => UserWithAuthorizationResponseDtoFromJSON(jsonValue));
    }

    /**
     */
    async authControllerRetrieveUserWithRoles(requestParameters: AuthControllerRetrieveUserWithRolesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<UserWithAuthorizationResponseDto> {
        const response = await this.authControllerRetrieveUserWithRolesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async authControllerTwoFactorQrCodeRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<any>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v1/auth/2fa/qrcode`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.TextApiResponse(response) as any;
    }

    /**
     */
    async authControllerTwoFactorQrCode(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<any> {
        const response = await this.authControllerTwoFactorQrCodeRaw(initOverrides);
        return await response.value();
    }

    /**
     */
    async authControllerValidateTwoFactorAuthenticationRaw(requestParameters: AuthControllerValidateTwoFactorAuthenticationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<User>> {
        if (requestParameters.twoFactorAuthenticationCodeDto === null || requestParameters.twoFactorAuthenticationCodeDto === undefined) {
            throw new runtime.RequiredError('twoFactorAuthenticationCodeDto','Required parameter requestParameters.twoFactorAuthenticationCodeDto was null or undefined when calling authControllerValidateTwoFactorAuthentication.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/v1/auth/2fa/validate`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: TwoFactorAuthenticationCodeDtoToJSON(requestParameters.twoFactorAuthenticationCodeDto),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => UserFromJSON(jsonValue));
    }

    /**
     */
    async authControllerValidateTwoFactorAuthentication(requestParameters: AuthControllerValidateTwoFactorAuthenticationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<User> {
        const response = await this.authControllerValidateTwoFactorAuthenticationRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
