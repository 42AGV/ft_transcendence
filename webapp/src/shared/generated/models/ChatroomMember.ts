/* tslint:disable */
/* eslint-disable */
/**
 * transcendence-app
 * The transcendence-app API description
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
/**
 * 
 * @export
 * @interface ChatroomMember
 */
export interface ChatroomMember {
    /**
     * 
     * @type {string}
     * @memberof ChatroomMember
     */
    chatId: string;
    /**
     * 
     * @type {string}
     * @memberof ChatroomMember
     */
    userId: string;
    /**
     * 
     * @type {Date}
     * @memberof ChatroomMember
     */
    joinedAt: Date | null;
    /**
     * 
     * @type {boolean}
     * @memberof ChatroomMember
     */
    owner?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof ChatroomMember
     */
    admin: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof ChatroomMember
     */
    muted: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof ChatroomMember
     */
    banned: boolean;
}

/**
 * Check if a given object implements the ChatroomMember interface.
 */
export function instanceOfChatroomMember(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "chatId" in value;
    isInstance = isInstance && "userId" in value;
    isInstance = isInstance && "joinedAt" in value;
    isInstance = isInstance && "admin" in value;
    isInstance = isInstance && "muted" in value;
    isInstance = isInstance && "banned" in value;

    return isInstance;
}

export function ChatroomMemberFromJSON(json: any): ChatroomMember {
    return ChatroomMemberFromJSONTyped(json, false);
}

export function ChatroomMemberFromJSONTyped(json: any, ignoreDiscriminator: boolean): ChatroomMember {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'chatId': json['chatId'],
        'userId': json['userId'],
        'joinedAt': (json['joinedAt'] === null ? null : new Date(json['joinedAt'])),
        'owner': !exists(json, 'owner') ? undefined : json['owner'],
        'admin': json['admin'],
        'muted': json['muted'],
        'banned': json['banned'],
    };
}

export function ChatroomMemberToJSON(value?: ChatroomMember | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'chatId': value.chatId,
        'userId': value.userId,
        'joinedAt': (value.joinedAt === null ? null : value.joinedAt.toISOString()),
        'owner': value.owner,
        'admin': value.admin,
        'muted': value.muted,
        'banned': value.banned,
    };
}

