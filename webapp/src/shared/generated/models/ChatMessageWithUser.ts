/* tslint:disable */
/* eslint-disable */
/**
 * transcendence-app
 * The transcendence-app API description
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
/**
 * 
 * @export
 * @interface ChatMessageWithUser
 */
export interface ChatMessageWithUser {
    /**
     * 
     * @type {string}
     * @memberof ChatMessageWithUser
     */
    id: string;
    /**
     * 
     * @type {string}
     * @memberof ChatMessageWithUser
     */
    avatarId: string;
    /**
     * 
     * @type {number}
     * @memberof ChatMessageWithUser
     */
    avatarX: number;
    /**
     * 
     * @type {number}
     * @memberof ChatMessageWithUser
     */
    avatarY: number;
    /**
     * 
     * @type {string}
     * @memberof ChatMessageWithUser
     */
    username: string;
    /**
     * 
     * @type {string}
     * @memberof ChatMessageWithUser
     */
    senderId: string;
    /**
     * 
     * @type {string}
     * @memberof ChatMessageWithUser
     */
    recipientId: string;
    /**
     * 
     * @type {string}
     * @memberof ChatMessageWithUser
     */
    content: string;
    /**
     * 
     * @type {Date}
     * @memberof ChatMessageWithUser
     */
    createdAt: Date;
}

/**
 * Check if a given object implements the ChatMessageWithUser interface.
 */
export function instanceOfChatMessageWithUser(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "id" in value;
    isInstance = isInstance && "avatarId" in value;
    isInstance = isInstance && "avatarX" in value;
    isInstance = isInstance && "avatarY" in value;
    isInstance = isInstance && "username" in value;
    isInstance = isInstance && "senderId" in value;
    isInstance = isInstance && "recipientId" in value;
    isInstance = isInstance && "content" in value;
    isInstance = isInstance && "createdAt" in value;

    return isInstance;
}

export function ChatMessageWithUserFromJSON(json: any): ChatMessageWithUser {
    return ChatMessageWithUserFromJSONTyped(json, false);
}

export function ChatMessageWithUserFromJSONTyped(json: any, ignoreDiscriminator: boolean): ChatMessageWithUser {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'id': json['id'],
        'avatarId': json['avatarId'],
        'avatarX': json['avatarX'],
        'avatarY': json['avatarY'],
        'username': json['username'],
        'senderId': json['senderId'],
        'recipientId': json['recipientId'],
        'content': json['content'],
        'createdAt': (new Date(json['createdAt'])),
    };
}

export function ChatMessageWithUserToJSON(value?: ChatMessageWithUser | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'id': value.id,
        'avatarId': value.avatarId,
        'avatarX': value.avatarX,
        'avatarY': value.avatarY,
        'username': value.username,
        'senderId': value.senderId,
        'recipientId': value.recipientId,
        'content': value.content,
        'createdAt': (value.createdAt.toISOString()),
    };
}

