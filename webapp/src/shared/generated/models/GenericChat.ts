/* tslint:disable */
/* eslint-disable */
/**
 * transcendence-app
 * The transcendence-app API description
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
/**
 * 
 * @export
 * @interface GenericChat
 */
export interface GenericChat {
    /**
     * 
     * @type {string}
     * @memberof GenericChat
     */
    avatarId: string;
    /**
     * 
     * @type {number}
     * @memberof GenericChat
     */
    avatarX: number;
    /**
     * 
     * @type {number}
     * @memberof GenericChat
     */
    avatarY: number;
    /**
     * 
     * @type {string}
     * @memberof GenericChat
     */
    chatType: GenericChatChatTypeEnum;
    /**
     * 
     * @type {string}
     * @memberof GenericChat
     */
    name: string;
    /**
     * 
     * @type {string}
     * @memberof GenericChat
     */
    id: string;
    /**
     * 
     * @type {boolean}
     * @memberof GenericChat
     */
    isPublic: boolean | null;
    /**
     * 
     * @type {string}
     * @memberof GenericChat
     */
    lastMsgSenderUsername: string | null;
    /**
     * 
     * @type {string}
     * @memberof GenericChat
     */
    lastMessage: string | null;
    /**
     * 
     * @type {Date}
     * @memberof GenericChat
     */
    lastMessageDate: Date;
}


/**
 * @export
 */
export const GenericChatChatTypeEnum = {
    OneToOne: 'oneToOne',
    Chatroom: 'chatroom'
} as const;
export type GenericChatChatTypeEnum = typeof GenericChatChatTypeEnum[keyof typeof GenericChatChatTypeEnum];


/**
 * Check if a given object implements the GenericChat interface.
 */
export function instanceOfGenericChat(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "avatarId" in value;
    isInstance = isInstance && "avatarX" in value;
    isInstance = isInstance && "avatarY" in value;
    isInstance = isInstance && "chatType" in value;
    isInstance = isInstance && "name" in value;
    isInstance = isInstance && "id" in value;
    isInstance = isInstance && "isPublic" in value;
    isInstance = isInstance && "lastMsgSenderUsername" in value;
    isInstance = isInstance && "lastMessage" in value;
    isInstance = isInstance && "lastMessageDate" in value;

    return isInstance;
}

export function GenericChatFromJSON(json: any): GenericChat {
    return GenericChatFromJSONTyped(json, false);
}

export function GenericChatFromJSONTyped(json: any, ignoreDiscriminator: boolean): GenericChat {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'avatarId': json['avatarId'],
        'avatarX': json['avatarX'],
        'avatarY': json['avatarY'],
        'chatType': json['chatType'],
        'name': json['name'],
        'id': json['id'],
        'isPublic': json['isPublic'],
        'lastMsgSenderUsername': json['lastMsgSenderUsername'],
        'lastMessage': json['lastMessage'],
        'lastMessageDate': (new Date(json['lastMessageDate'])),
    };
}

export function GenericChatToJSON(value?: GenericChat | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'avatarId': value.avatarId,
        'avatarX': value.avatarX,
        'avatarY': value.avatarY,
        'chatType': value.chatType,
        'name': value.name,
        'id': value.id,
        'isPublic': value.isPublic,
        'lastMsgSenderUsername': value.lastMsgSenderUsername,
        'lastMessage': value.lastMessage,
        'lastMessageDate': (value.lastMessageDate.toISOString()),
    };
}

