/* tslint:disable */
/* eslint-disable */
/**
 * transcendence-app
 * The transcendence-app API description
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { User } from './User';
import {
    UserFromJSON,
    UserFromJSONTyped,
    UserToJSON,
} from './User';

/**
 * 
 * @export
 * @interface GameWithUsers
 */
export interface GameWithUsers {
    /**
     * 
     * @type {string}
     * @memberof GameWithUsers
     */
    id: string;
    /**
     * 
     * @type {string}
     * @memberof GameWithUsers
     */
    playerOneUsername: string;
    /**
     * 
     * @type {string}
     * @memberof GameWithUsers
     */
    playerTwoUsername: string;
    /**
     * 
     * @type {Date}
     * @memberof GameWithUsers
     */
    createdAt: Date;
    /**
     * 
     * @type {number}
     * @memberof GameWithUsers
     */
    gameDurationInSeconds: number;
    /**
     * 
     * @type {number}
     * @memberof GameWithUsers
     */
    playerOneScore: number;
    /**
     * 
     * @type {number}
     * @memberof GameWithUsers
     */
    playerTwoScore: number;
    /**
     * 
     * @type {string}
     * @memberof GameWithUsers
     */
    gameMode: GameWithUsersGameModeEnum;
    /**
     * 
     * @type {User}
     * @memberof GameWithUsers
     */
    playerOne: User;
    /**
     * 
     * @type {User}
     * @memberof GameWithUsers
     */
    playerTwo: User;
}


/**
 * @export
 */
export const GameWithUsersGameModeEnum = {
    Training: 'training',
    Classic: 'classic',
    ShortPaddle: 'shortPaddle',
    MysteryZone: 'mysteryZone',
    Unknown: 'unknown'
} as const;
export type GameWithUsersGameModeEnum = typeof GameWithUsersGameModeEnum[keyof typeof GameWithUsersGameModeEnum];


/**
 * Check if a given object implements the GameWithUsers interface.
 */
export function instanceOfGameWithUsers(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "id" in value;
    isInstance = isInstance && "playerOneUsername" in value;
    isInstance = isInstance && "playerTwoUsername" in value;
    isInstance = isInstance && "createdAt" in value;
    isInstance = isInstance && "gameDurationInSeconds" in value;
    isInstance = isInstance && "playerOneScore" in value;
    isInstance = isInstance && "playerTwoScore" in value;
    isInstance = isInstance && "gameMode" in value;
    isInstance = isInstance && "playerOne" in value;
    isInstance = isInstance && "playerTwo" in value;

    return isInstance;
}

export function GameWithUsersFromJSON(json: any): GameWithUsers {
    return GameWithUsersFromJSONTyped(json, false);
}

export function GameWithUsersFromJSONTyped(json: any, ignoreDiscriminator: boolean): GameWithUsers {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'id': json['id'],
        'playerOneUsername': json['playerOneUsername'],
        'playerTwoUsername': json['playerTwoUsername'],
        'createdAt': (new Date(json['createdAt'])),
        'gameDurationInSeconds': json['gameDurationInSeconds'],
        'playerOneScore': json['playerOneScore'],
        'playerTwoScore': json['playerTwoScore'],
        'gameMode': json['gameMode'],
        'playerOne': UserFromJSON(json['playerOne']),
        'playerTwo': UserFromJSON(json['playerTwo']),
    };
}

export function GameWithUsersToJSON(value?: GameWithUsers | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'id': value.id,
        'playerOneUsername': value.playerOneUsername,
        'playerTwoUsername': value.playerTwoUsername,
        'createdAt': (value.createdAt.toISOString()),
        'gameDurationInSeconds': value.gameDurationInSeconds,
        'playerOneScore': value.playerOneScore,
        'playerTwoScore': value.playerTwoScore,
        'gameMode': value.gameMode,
        'playerOne': UserToJSON(value.playerOne),
        'playerTwo': UserToJSON(value.playerTwo),
    };
}

