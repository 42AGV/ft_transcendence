/* tslint:disable */
/* eslint-disable */
/**
 * transcendence-app
 * The transcendence-app API description
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
/**
 * 
 * @export
 * @interface ChatroomMemberWithUser
 */
export interface ChatroomMemberWithUser {
    /**
     * 
     * @type {string}
     * @memberof ChatroomMemberWithUser
     */
    username: string;
    /**
     * 
     * @type {string}
     * @memberof ChatroomMemberWithUser
     */
    avatarId: string;
    /**
     * 
     * @type {number}
     * @memberof ChatroomMemberWithUser
     */
    avatarX: number;
    /**
     * 
     * @type {number}
     * @memberof ChatroomMemberWithUser
     */
    avatarY: number;
    /**
     * 
     * @type {boolean}
     * @memberof ChatroomMemberWithUser
     */
    owner: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof ChatroomMemberWithUser
     */
    admin: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof ChatroomMemberWithUser
     */
    muted: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof ChatroomMemberWithUser
     */
    banned: boolean;
    /**
     * 
     * @type {string}
     * @memberof ChatroomMemberWithUser
     */
    userId: string;
}

/**
 * Check if a given object implements the ChatroomMemberWithUser interface.
 */
export function instanceOfChatroomMemberWithUser(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "username" in value;
    isInstance = isInstance && "avatarId" in value;
    isInstance = isInstance && "avatarX" in value;
    isInstance = isInstance && "avatarY" in value;
    isInstance = isInstance && "owner" in value;
    isInstance = isInstance && "admin" in value;
    isInstance = isInstance && "muted" in value;
    isInstance = isInstance && "banned" in value;
    isInstance = isInstance && "userId" in value;

    return isInstance;
}

export function ChatroomMemberWithUserFromJSON(json: any): ChatroomMemberWithUser {
    return ChatroomMemberWithUserFromJSONTyped(json, false);
}

export function ChatroomMemberWithUserFromJSONTyped(json: any, ignoreDiscriminator: boolean): ChatroomMemberWithUser {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'username': json['username'],
        'avatarId': json['avatarId'],
        'avatarX': json['avatarX'],
        'avatarY': json['avatarY'],
        'owner': json['owner'],
        'admin': json['admin'],
        'muted': json['muted'],
        'banned': json['banned'],
        'userId': json['userId'],
    };
}

export function ChatroomMemberWithUserToJSON(value?: ChatroomMemberWithUser | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'username': value.username,
        'avatarId': value.avatarId,
        'avatarX': value.avatarX,
        'avatarY': value.avatarY,
        'owner': value.owner,
        'admin': value.admin,
        'muted': value.muted,
        'banned': value.banned,
        'userId': value.userId,
    };
}

