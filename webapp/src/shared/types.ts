export enum Color {
  WARNING = 'text-color-warning',
  SUBMIT = 'text-color-submit',
  ONLINE = 'text-color-online',
  OFFLINE = 'text-color-offline',
  LIGHT = 'text-color-light',
  BACKGROUND = 'text-color-background',
  DARK = 'text-color-dark',
}

export interface User {
  readonly username: string;
  readonly email: string;
  readonly avatarId: string | null;
  readonly id: string;
  readonly createdAt: Date;
} /* This could be autogenerated - it's provisionally here, since it's a shared type */

export function instanceOfUser(value: object): boolean {
  let isInstance = true;
  isInstance = isInstance && 'username' in value;
  isInstance = isInstance && 'email' in value;
  isInstance = isInstance && 'avatarId' in value;
  isInstance = isInstance && 'id' in value;
  isInstance = isInstance && 'createdAt' in value;
  return isInstance;
} /* This could be autogenerated - it's provisionally here, since it's a shared type */

export function instanceOfArrayTyped(
  value: object,
  elementChecker: (object: any) => boolean,
): boolean {
  if (!Array.isArray(value)) {
    return false;
  }
  let ret = true;
  value.forEach((user) => {
    ret = ret && elementChecker(user); // maybe we would like ret && elementChecker(user) || !user; ?
  });
  return ret;
} /* maybe this one shouldn't be here */
